import java.io.*;
import java.util.*;

/* 
 * Discrete Fourier transform (Java)
 * by Project Nayuki, 2017. Public domain.
 * https://www.nayuki.io/page/how-to-implement-the-discrete-fourier-transform
 */


public final class DiscreteFourierTransform {
	
	/* 
	 * Computes the discrete Fourier transform (DFT) of the given complex vector.
	 * All the array arguments must be non-null and have the same length.
	 */
	public static void main(String args[]) throws Exception {
		//double[] data = {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0};
		//double[] data = {1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, -2, -3, -4, -6, -7, -7, -8, -8, -8, -7, -6, -4, -2, -1, 1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 3, 2, 2, 1, 0, -1, -2, -4, -5, -6, -7, -8, -8, -8, -9, -8, -8, -7, -7, -6, -5, -3, -2, -2, -1, 0, 0, 0, 0, 0, 0, 0, -1, -2, -2, -3, -4, -5, -6, -6, -7, -8, -8, -8, -9, -9, -9, -9, -8, -8, -7, -7, -6, -5, -4, -3, -3, -2, -1, 0, 0, 0, 0, -1, -1, -1, -2, -2, -3, -4, -5, -5, -6, -7, -7, -8, -9, -10, -10, -11, -11, -12, -12, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -12, -12, -11, -9, -6, -3, 1, 5, 9, 13, 16, 19, 21, 22, 23, 22, 21, 19, 17, 15, 14, 13, 12, 11, 10, 8, 6, 4, 1, -1, -4, -5, -6, -7, -7, -6, -6, -5, -4, -3, -3, -3, -3, -3, -4, -5, -6, -6, -5, -4, -3, -2, -1, 0, 0, -1, -1, -2, -2, -3, -3, -3, -2, -1, 0, 1, 2, 4, 5, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 9, 8, 7, 6, 5, 5, 4, 3, 2, 2, 1, 0, 0, -1, -1, -1, -1}; // ah
		//double[] data = {-16, -16, -16, -15, -15, -14, -14, -13, -12, -11, -10, -8, -7, -6, -5, -5, -4, -3, -3, -2, -2, -2, -2, -2, -1, -1, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 7, 7, 7, 8, 9, 9, 9, 10, 10, 10, 11, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 13, 13, 12, 12, 12, 12, 12, 11, 11, 10, 10, 10, 9, 8, 7, 6, 5, 5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -3, -4, -4, -5, -5, -5, -5, -6, -6, -6, -6, -6, -7, -7, -8, -8, -9, -9, -9, -9, -9, -9, -9, -9, -8, -8, -7, -7, -6, -6, -6, -6, -6, -5, -5, -4, -4, -3, -3, -2, -1, -1, 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 7, 7, 6, 5, 4, 3, 3, 2, 2, 1, 1, 0, 0, -1, -1, -2, -2, -3, -3, -4, -4, -4, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -6, -6, -7, -7, -8, -8, -9, -9, -10, -10, -10, -10, -11, -11, -12, -13, -13, -14, -14, -15, -15, -15, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16}; //oo
		//double[] data = {13, 13, 12, 12, 11, 10, 9, 8, 7, 7, 7, 7, 6, 5, 4, 3, 1, 0, -2, -4, -6, -7, -7, -7, -7, -6, -6, -5, -5, -5, -6, -7, -8, -9, -10, -11, -11, -11, -10, -8, -7, -6, -4, -3, -3, -3, -3, -3, -4, -4, -4, -4, -3, -2, -2, 0, 0, 1, 1, 1, 0, 0, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 6, 6, 5, 5, 4, 4, 5, 5, 7, 8, 9, 11, 12, 13, 13, 13, 13, 12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 8, 7, 6, 5, 3, 2, 0, -1, -2, -3, -3, -3, -3, -4, -5, -5, -7, -8, -9, -11, -12, -13, -13, -13, -13, -12, -11, -10, -9, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -6, -5, -4, -3, -2, -2, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 7, 8, 8, 9, 9, 10, 9, 9, 8, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -3, -3, -3, -4, -4, -5, -6, -7, -8, -9, -10, -11, -11, -11, -11, -11, -10, -10, -10, -10, -10, -11, -12, -12, -13, -13, -13, -13, -13, -12, -11, -10, -10, -9, -9, -9, -9, -9, -9, -8, -8, -7, -7, -6, -5, -5, -4, -4, -4, -4, -4, -4, -3, -3, -1, 0, 2, 4, 5, 7, 8, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 10, 11, 11, 12, 12}; // oh
		//double[] data = {-2, -1, -1, -2, -3, -4, -6, -8, -11, -13, -16, -18, -18, -18, -16, -12, -8, -2, 4, 11, 18, 25, 31, 35, 38, 39, 37, 33, 27, 19, 10, 2, -7, -15, -21, -26, -28, -29, -27, -22, -16, -9, -2, 6, 12, 18, 21, 23, 23, 22, 18, 13, 7, 0, -6, -13, -18, -23, -26, -27, -27, -26, -24, -20, -16, -11, -5, 0, 5, 10, 13, 16, 17, 17, 17, 15, 12, 9, 4, 0, -4, -8, -11, -13, -14, -14, -12, -10, -6, -3, 2, 6, 11, 15, 18, 19, 20, 19, 17, 15, 11, 7, 3, -1, -5, -9, -12, -14, -15, -16, -15, -14, -12, -10, -8, -5, -3, 0, 2, 3, 5, 6, 6, 6, 5, 4, 3, 2, 0, -1, -3, -4, -5, -6, -6, -6, -5, -3, -1, 1, 3, 6, 8, 11, 12, 14, 14, 14, 14, 12, 10, 8, 6, 3, 0, -2, -4, -6, -7, -8, -9, -8, -8, -7, -7, -6, -5, -5, -5, -5, -5, -5, -5, -6, -6, -7, -7, -7, -7, -6, -5, -4, -3, -1, 0, 2, 3, 5, 6, 7, 7, 8, 8, 8, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -1, -1, -1, -1, -1, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, -1, -3, -4, -6, -7, -8, -8, -8, -8, -7, -7, -5, -4, -3, -1, 0, 1, 2, 3, 3, 3, 3, 2, 1, 1, 0, -1, -2, -2, -3, -3, -3, -2, -2, -1, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, -1, -2, -3, -3, -4, -4, -4, -4, -4, -3, -2, -1, 0, 0, 1, 1, 1, 1, 0, 0, -1, -1, -2, -3, -4, -4, -5, -5, -5, -6, -6, -6, -6, -7, -6, -6, -6, -5, -5, -4, -3, -3, -3, -3, -3}; // aa
		//double[] data = {0, -1, -1, -1, -2, -3, -3, -4, -4, -4, -5, -6, -7, -8, -9, -9, -9, -9, -8, -7, -7, -6, -5, -5, -5, -5, -5, -5, -5, -4, -2, 0, 1, 3, 4, 4, 4, 4, 5, 5, 6, 7, 8, 9, 10, 10, 9, 8, 8, 7, 6, 6, 6, 6, 7, 7, 7, 6, 5, 3, 1, 0, -2, -2, -3, -4, -5, -6, -7, -7, -7, -7, -7, -8, -9, -10, -11, -11, -11, -11, -11, -11, -10, -9, -8, -7, -7, -7, -7, -6, -6, -4, -2, 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 11, 11, 12, 11, 10, 10, 10, 10, 10, 9, 8, 7, 6, 6, 6, 6, 5, 4, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -7, -8, -9, -10, -12, -13, -14, -13, -12, -12, -11, -11, -11, -11, -11, -11, -10, -10, -9, -7, -5, -3, -1, 0, 2, 3, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 14, 14, 14, 13, 13, 13, 12, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0, -2, -3, -4, -5, -6, -7, -7, -8, -9, -10, -11, -12, -12, -11, -10, -9, -8, -7, -7, -6, -6, -5, -4, -3, -2, -1, 0, 1, 3, 5, 6, 7, 8, 9, 9, 10, 10, 11, 12, 12, 11, 11, 12, 12, 12, 12, 11, 10, 9, 7, 6, 6, 5, 4, 4, 3, 1, 0, -1, -3, -5, -6, -8, -9, -9, -10, -10, -11, -12, -13, -13, -14, -14, -14, -15, -14, -14, -14, -13, -12, -11, -9, -8, -7, -6, -5, -4, -3, -1, 1, 2, 4, 5, 7, 9, 11, 12, 13, 13, 13, 13, 14, 14, 15, 15, 15, 14, 14, 13, 12, 11, 9, 7, 6, 5, 4, 3, 1, 0, -2, -4, -5, -7, -8, -9, -10, -11, -11, -12, -13, -13, -13, -13, -13, -13, -12, -12, -12, -11, -11, -10, -9, -8, -7, -6, -6, -5, -4, -3, -2, -2, -1, -1, -1, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0}; // craig_ah
		//double[] data1 = {-2, -1, -1, -2, -3, -4, -6, -8, -11, -13, -16, -18, -18, -18, -16, -12, -8, -2, 4, 11, 18, 25, 31, 35, 38, 39, 37, 33, 27, 19, 10, 2, -7, -15, -21, -26, -28, -29, -27, -22, -16, -9, -2, 6, 12, 18, 21, 23, 23, 22, 18, 13, 7, 0, -6, -13, -18, -23, -26, -27, -27, -26, -24, -20, -16, -11, -5, 0, 5, 10, 13, 16, 17, 17, 17, 15, 12, 9, 4, 0, -4, -8, -11, -13, -14, -14, -12, -10, -6, -3, 2, 6, 11, 15, 18, 19, 20, 19, 17, 15, 11, 7, 3, -1, -5, -9, -12, -14, -15, -16, -15, -14, -12, -10, -8, -5, -3, 0, 2, 3, 5, 6, 6, 6, 5, 4, 3, 2, 0, -1, -3, -4, -5, -6, -6, -6, -5, -3, -1, 1, 3, 6, 8, 11, 12, 14, 14, 14, 14, 12, 10, 8, 6, 3, 0, -2, -4, -6, -7, -8, -9, -8, -8, -7, -7, -6, -5, -5, -5, -5, -5, -5, -5, -6, -6, -7, -7, -7, -7, -6, -5, -4, -3, -1, 0, 2, 3, 5, 6, 7, 7, 8, 8, 8, 8, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -1, -1, -1, -1, -1, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, -1, -3, -4, -6, -7, -8, -8, -8, -8, -7, -7, -5, -4, -3, -1, 0, 1, 2, 3, 3, 3, 3, 2, 1, 1, 0, -1, -2, -2, -3, -3, -3, -2, -2, -1, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, -1, -2, -3, -3, -4, -4, -4, -4, -4, -3, -2, -1, 0, 0, 1, 1, 1, 1, 0, 0, -1, -1, -2, -3, -4, -4, -5, -5, -5, -6, -6, -6, -6, -7, -6, -6, -6, -5, -5, -4, -3, -3, -3, -3, -3, -4, -5, -7, -8, -10, -12, -13, -14, -13, -11, -8, -4, 1, 6, 13, 19, 25, 29, 33, 35, 34, 32, 28, 22, 14, 7, -1, -9, -16, -21, -25, -26, -25, -22, -18, -12, -5, 2, 8, 13, 17, 20, 21, 20, 17, 13, 8, 2, -4, -10, -15, -19, -22, -24, -24, -24, -22, -19, -16, -11, -7, -2, 3, 7, 10, 12, 14, 15, 14, 13, 11, 9, 5, 2, -2, -5, -8, -10, -12, -12, -12, -10, -8, -5, -1, 3, 7, 11, 14, 17, 18, 18, 17, 15, 13, 9, 6, 2, -2, -5, -8, -11, -12, -13, -13, -12, -11, -10, -8, -6, -4, -2, -1, 1, 2, 3, 3, 3, 3, 2, 2, 1, 0, -1, -2, -3, -4, -5, -5, -5, -4, -4, -2, -1, 1, 3, 6, 8, 9, 11, 12, 13, 13, 13, 12, 10, 8, 6, 3, 1, -1, -3, -5, -6, -7, -8, -8, -7, -7, -6, -5, -4, -4, -3, -3, -3, -3, -4, -4, -4, -5, -5, -6, -6, -6, -5, -5, -4, -3, -1, 0, 1, 2, 3, 4, 5, 6, 6, 7, 7, 7, 6, 6, 5, 4, 4, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, -1, -1, -2, -3, -4, -5, -6, -6, -7, -7, -7, -6, -5, -5, -3, -2, -1, 0, 0, 1, 1, 1, 1, 1, 0, -1, -1, -2, -2, -2, -2, -2, -1, -1, 0, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, -1, -2, -2, -3, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 0, 0, 0, -1, -1, -2, -2, -3, -3, -4, -4, -4, -4, -5, -5, -6, -6, -7, -7, -7, -7, -7, -7, -6, -5, -5, -4, -4, -4, -4, -5, -6, -8, -10, -12, -14, -15, -15, -14, -11, -8, -3, 3, 9, 16, 23, 29, 33, 36, 37, 36, 32, 27, 20, 11, 3, -5, -13, -20, -24, -27, -27, -25, -21, -15, -8, -1, 7, 13, 18, 21, 22, 22, 20, 16, 11, 5, -1, -8, -14, -19, -22, -25, -25, -25, -24, -21, -18, -14, -9, -4, 1, 5, 9, 12, 15, 16, 16, 16, 14, 12, 8, 4, 0, -4, -8, -12, -14, -16, -16, -15, -12, -9, -5, 0, 6, 11, 15, 19, 21, 22, 21, 19, 16, 12, 8, 3, -2, -7, -11, -14, -16, -16, -16, -14, -12, -9, -6, -3, 0, 2, 4, 5, 6, 5, 4, 3, 2, 0, -2, -3, -4, -5, -5, -5, -5, -5, -4, -3, -2, -1, 0, 2, 3, 4, 5, 7, 8, 8, 9, 10, 10, 9, 9, 8, 7, 6, 4, 2, 0, -1, -3, -5, -6, -6, -7, -7, -6, -5, -5, -3, -2, -1, -1, 0, 0, 0, -1, -2, -3, -4, -5, -6, -7, -7, -7, -7, -6, -4, -2, -1, 1, 3, 5, 6, 7, 8, 8, 8, 7, 6, 5, 4, 2, 1, 0, -1, -1, -1, -1, -1, -1, 0, 1, 2, 2, 3, 3, 3, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -7, -7, -7, -6, -6, -5, -4, -3, -1, 0, 1, 1, 2, 2, 2, 2, 2, 1, 0, 0, -1, -2, -2, -2, -3, -2, -2, -1, -1, 0, 1, 1, 2, 2, 2, 2, 1, 1, 0, -1, -2, -3, -4, -4, -4, -4, -4, -4, -3, -2, -1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, -1, -2, -3, -4, -5, -5, -6, -7, -8, -8, -8, -8, -8, -7, -6, -5, -4, -3, -3, -3, -3, -4, -5, -7, -9, -12, -14, -16, -17, -17, -16, -13, -8, -3, 4, 11, 18, 26, 32, 36, 39, 40, 38, 33, 27, 19, 10, 1, -8, -16, -23, -27, -29, -29, -26, -20, -13, -6, 2, 10, 16, 21, 24, 24, 24, 21, 16, 10, 4, -3, -10, -16, -21, -25, -27, -27, -27, -25, -23, -19, -15, -10, -4, 1, 5, 9, 12, 15, 16, 17, 16, 14, 12, 8, 4, 0, -5, -9, -12, -14, -16, -15, -14, -12, -8, -4, 1, 7, 12, 17, 20, 22, 23, 22, 20, 17, 13, 8, 3, -3, -7, -12, -15, -17, -17, -17, -15, -13, -10, -6, -3, 0, 3, 5, 7, 8, 8, 7, 6, 4, 2, 0, -2, -4, -6, -7, -8, -8, -8, -7, -6, -4, -3, 0, 2, 4, 6, 8, 10, 11, 12, 12, 12, 12, 11, 9, 7, 5, 3, 1, -1, -3, -5, -6, -7, -8, -8, -7, -6, -5, -4, -3, -1, 0, 1, 1, 2, 1, 1, 0, -2, -3, -4, -6, -7, -8, -8, -8, -7, -6, -4, -2, 0, 2, 3, 5, 7, 8, 8, 8, 8, 7, 6, 5, 3, 2, 0, -1, -1, -2, -2, -2, -1, -1, 0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 1, 0, -2, -3, -4, -5, -6, -6, -7, -7, -7, -6, -6, -5, -4, -3, -2, -1, 1, 1, 2, 3, 3, 3, 2, 2, 1, 0, -1, -2, -2, -3, -3, -3, -3, -3, -2, -1, -1, 0, 1, 1, 2, 2, 2, 1, 0, 0, -1, -2, -3, -3, -4, -4, -4, -3, -3, -2, -2, -1, 0, 0, 0, 1, 1, 1, 1, 0, 0, -1, -2, -2, -3, -4, -5, -6, -7, -8, -8, -9, -9, -9, -8, -7, -6, -5, -4, -4, -3, -4, -4, -5, -7, -9, -12, -14, -16, -17, -16, -15, -12, -7, -2, 5, 12, 19, 26, 32, 37, 39, 39, 37, 32, 25, 17, 8, -1, -9, -17, -23, -27, -29, -28, -24, -19, -12, -4, 4, 11, 17, 21, 23, 24, 22, 19, 14, 8, 2, -5, -12, -17, -22, -25, -27, -27, -26, -24, -22, -18, -13, -8, -3, 2, 6, 10, 13, 15, 16, 17, 16, 14, 11, 7, 3, -1, -6, -10, -13, -15, -16, -16, -14, -12, -8, -3, 3, 8, 14, 18, 21, 23, 23, 22, 19, 16, 11, 6, 1, -5, -9, -13, -16, -18, -18, -17, -15, -12, -9, -6, -2, 1, 4, 6, 8, 8, 9, 8, 7, 5, 3, 1, -1, -3, -5, -7, -8, -9, -9, -8, -7, -6, -4, -1, 1, 4, 6, 8, 10, 12, 13, 13, 13, 12, 11, 9, 7, 4, 2, 0, -3, -5, -6, -7, -8, -8, -8, -7, -6, -4, -3, -1, 0, 2, 2, 3, 3, 2, 1, 0, -2, -3, -5, -6, -7, -8, -9, -8, -7, -6, -4, -2, 0, 2, 4, 6, 8, 9, 9, 9, 8, 7, 6, 4, 2, 1, -1, -2, -2, -3, -3, -2, -2, -1, 0, 1, 2, 3, 3, 4, 4, 3, 2, 1, 1, 0, -1, -2, -4, -5, -5, -6, -6, -6, -6, -6, -5, -4, -4, -3, -2, -1, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, -1, -2, -2, -3, -4, -4, -4, -4, -3, -2, -1, -1, 0, 1, 2, 2, 2, 2, 2, 1, 0, -1, -1, -2, -3, -3, -4, -4, -3, -3, -2, -2, -1, 0, 1, 1, 2, 2, 2, 2, 1, 0, 0, -2, -3, -4, -5, -7, -8, -9, -10, -10, -10, -10, -9, -8, -7, -5, -4, -3, -3, -3, -3, -4, -5, -8, -10, -13, -15, -17, -17, -17, -15, -11, -7, -1, 6, 14, 21, 27, 33, 37, 39, 38, 35, 30, 23, 15, 7, -2, -10, -17, -22, -25, -26, -24, -21, -15, -9, -2, 5, 11, 16, 19, 21, 21, 19, 16, 11, 6, 0, -6, -12, -17, -21, -24, -25, -25, -25, -23, -21, -17, -13, -9, -4, 1, 5, 8, 11, 13, 15, 15, 14, 13, 10, 7, 3, -1, -5, -9, -12, -13, -14, -13, -12, -9, -5, 0, 5, 10, 14, 18, 20, 22, 21, 20, 17, 14, 10, 5, 0, -4, -8, -12, -14, -15, -15, -14, -12, -10, -7, -5, -2, 1, 3, 5, 6, 7, 7, 6, 5, 4, 2, 0, -2, -4, -6, -8, -9, -9, -9, -9, -8, -6, -4, -1, 1, 4, 7, 9, 11, 13, 14, 14, 13, 12, 11, 9, 7, 4, 1, -1, -3, -5, -7, -8, -8, -8, -7, -6, -5, -4, -2, -1, 0, 1, 2, 2, 2, 1, 0, -1, -2, -4, -5, -6, -7, -8, -7, -7, -6, -4, -2, 0, 2, 4, 6, 7, 8, 9, 9, 8, 7, 6, 4, 3, 1, 0, -1, -2, -2, -2, -2, -2, -1, 0, 1, 1, 2, 3, 3, 3, 2, 1, 1, 0, -1, -2, -3, -3, -4, -5, -5, -5, -5, -5, -4, -4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, -1, -1, -2, -2, -2, -2, -2, -1, -1, -1, 0, 0, 0, 1, 1, 1, 0, 0, -1, -1, -2, -2, -3, -3, -4, -4, -3, -3, -2, -2, -1, 0, 0, 1, 1, 2, 2, 2, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -9, -10, -9, -9, -8, -7, -5, -4, -3, -2, -2, -2, -2, -3, -5, -8, -11, -14, -16, -18, -19, -19, -17, -14, -9, -3, 4, 12, 19, 26, 32, 37, 39, 40, 37, 33, 26, 18, 10, 1, -7, -15, -21, -24, -26, -25, -22, -17, -11, -4, 3, 10, 15, 19, 21, 22, 21, 18, 14, 8, 2, -4, -10, -16, -20, -24, -25, -26, -26, -25, -22, -19, -15, -10, -5, 0, 4, 8, 11, 14, 15, 16, 16, 14, 11, 8, 4, -1, -5, -9, -12, -14, -15, -15, -13, -10, -7, -2, 3, 8, 13, 17, 20, 22, 22, 21}; // non integral number of pulses
		//double[] data = new double[15352];
		//for(int k=0; k<data1.length; k++) {
		//		data[k] = data1[k];
		//}
		double[] data = {0, 2, 9, 19, 30, 36, 37, 33, 26, 23, 24, 30, 39, 45, 48, 44, 41, 41, 48, 58, 65, 64, 57, 49, 49, 57, 69, 78, 78, 74, 69, 70, 76, 83, 85, 81, 73, 68, 67, 72, 77, 80, 80, 78, 76, 74, 74, 73, 71, 68, 62, 54, 47, 44, 47, 56, 61, 60, 50, 40, 39, 46, 58, 61, 49, 27, 8, 7, 21, 42, 48, 36, 10, -7, -3, 20, 45, 49, 28, -7, -29, -24, 8, 40, 51, 29, -12, -42, -42, -10, 33, 56, 44, 5, -37, -53, -35, 4, 40, 49, 29, -10, -41, -50, -31, -2, 25, 28, 12, -15, -30, -27, -3, 20, 31, 19, -3, -19, -15, 5, 25, 24, 4, -26, -37, -25, 6, 30, 30, 7, -25, -42, -36, -13, 12, 24, 19, 3, -17, -31, -34, -24, -1, 20, 31, 19, -5, -26, -28, -7, 16, 28, 14, -9, -24, -16, 2, 14, 6, -13, -25, -19, 3, 21, 25, 10, -5, -14, -8, 1, 6, 8, 10, 15, 17, 10, -3, -11, 0, 25, 50, 52, 29, -10, -34, -31, -2, 27, 39, 27, 4, -13, -12, 3, 22, 36, 36, 25, 7, -6, -1, 22, 52, 65, 49, 9, -27, -30, 4, 49, 73, 53, 7, -33, -36, -3, 36, 54, 38, 7, -14, -10, 8, 29, 38, 40, 36, 30, 18, 2, -8, 2, 32, 65, 76, 54, 9, -26, -28, 1, 37, 49, 37, 11, -2, 5, 23, 32, 26, 7, -3, 4, 24, 45, 51, 42, 25, 10, 2, 4, 15, 30, 45, 51, 41, 17, -7, -12, 10, 47, 69, 54, 4, -50, -63, -22, 52, 105, 94, 20, -70, -112, -74, 23, 108, 126, 59, -39, -103, -86, -6, 81, 113, 75, -1, -61, -65, -23, 27, 46, 25, -15, -39, -34, -9, 6, -3, -32, -52, -45, -12, 22, 30, 3, -40, -69, -59, -20, 25, 39, 18, -23, -50, -48, -19, 8, 11, -17, -55, -78, -72, -39, -5, 9, -4, -38, -72, -89, -80, -50, -13, 11, 13, -14, -55, -90, -99, -79, -40, -7, 0, -23, -64, -98, -108, -93, -66, -43, -40, -51, -71, -86, -90, -86, -76, -67, -62, -62, -64, -68, -71, -75, -79, -84, -90, -91, -89, -79, -70, -63, -66, -75, -89, -100, -101, -95, -82, -72, -67, -71, -77, -81, -77, -68, -57, -50, -48, -50, -51, -51, -50, -56, -67, -80, -87, -82, -64, -45, -30, -28, -34, -42, -43, -37, -25, -19, -16, -20, -21, -19, -11, -3}; // zz
		double[] zeros = new double[data.length];
		double[] outreal = new double[data.length];
		double[] outimag = new double[data.length];
		computeDft(data,zeros,outreal,outimag);
		BufferedWriter out = new BufferedWriter(new FileWriter(new File("dft.txt")));
		for(int k=0; k<data.length; k++) {
			out.write(k+"\t"+outreal[k]+"\t"+outimag[k]+"\t"+Math.sqrt(outreal[k]*outreal[k]+outimag[k]*outimag[k])+"\n");
		}
		out.close();
	}
	public static void computeDft(double[] inreal, double[] inimag, double[] outreal, double[] outimag) {
		int n = inreal.length;
		for (int k = 0; k < n; k++) {  // For each output element
			//if(k%100==0) System.out.println((new Date())+": "+k);
			double sumreal = 0;
			double sumimag = 0;
			for (int t = 0; t < n; t++) {  // For each input element
				double angle = 2 * Math.PI * t * k / n;
				sumreal +=  inreal[t] * Math.cos(angle) + inimag[t] * Math.sin(angle);
				sumimag += -inreal[t] * Math.sin(angle) + inimag[t] * Math.cos(angle);
			}
			outreal[k] = sumreal;
			outimag[k] = sumimag;
		}
	}
	
}