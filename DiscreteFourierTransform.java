import java.io.*;
import java.util.*;

/* 
 * Discrete Fourier transform (Java)
 * by Project Nayuki, 2017. Public domain.
 * https://www.nayuki.io/page/how-to-implement-the-discrete-fourier-transform
 */


public final class DiscreteFourierTransform {
	
	/* 
	 * Computes the discrete Fourier transform (DFT) of the given complex vector.
	 * All the array arguments must be non-null and have the same length.
	 */
	public static void main(String args[]) throws Exception {
		//double[] data = {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0};
		//double[] data = {1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 0, -2, -3, -4, -6, -7, -7, -8, -8, -8, -7, -6, -4, -2, -1, 1, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 3, 2, 2, 1, 0, -1, -2, -4, -5, -6, -7, -8, -8, -8, -9, -8, -8, -7, -7, -6, -5, -3, -2, -2, -1, 0, 0, 0, 0, 0, 0, 0, -1, -2, -2, -3, -4, -5, -6, -6, -7, -8, -8, -8, -9, -9, -9, -9, -8, -8, -7, -7, -6, -5, -4, -3, -3, -2, -1, 0, 0, 0, 0, -1, -1, -1, -2, -2, -3, -4, -5, -5, -6, -7, -7, -8, -9, -10, -10, -11, -11, -12, -12, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -12, -12, -11, -9, -6, -3, 1, 5, 9, 13, 16, 19, 21, 22, 23, 22, 21, 19, 17, 15, 14, 13, 12, 11, 10, 8, 6, 4, 1, -1, -4, -5, -6, -7, -7, -6, -6, -5, -4, -3, -3, -3, -3, -3, -4, -5, -6, -6, -5, -4, -3, -2, -1, 0, 0, -1, -1, -2, -2, -3, -3, -3, -2, -1, 0, 1, 2, 4, 5, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 9, 8, 7, 6, 5, 5, 4, 3, 2, 2, 1, 0, 0, -1, -1, -1, -1}; // ah
		//double[] data = {-16, -16, -16, -15, -15, -14, -14, -13, -12, -11, -10, -8, -7, -6, -5, -5, -4, -3, -3, -2, -2, -2, -2, -2, -1, -1, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 7, 7, 7, 8, 9, 9, 9, 10, 10, 10, 11, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 13, 13, 12, 12, 12, 12, 12, 11, 11, 10, 10, 10, 9, 8, 7, 6, 5, 5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -3, -4, -4, -5, -5, -5, -5, -6, -6, -6, -6, -6, -7, -7, -8, -8, -9, -9, -9, -9, -9, -9, -9, -9, -8, -8, -7, -7, -6, -6, -6, -6, -6, -5, -5, -4, -4, -3, -3, -2, -1, -1, 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 7, 7, 6, 5, 4, 3, 3, 2, 2, 1, 1, 0, 0, -1, -1, -2, -2, -3, -3, -4, -4, -4, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -6, -6, -7, -7, -8, -8, -9, -9, -10, -10, -10, -10, -11, -11, -12, -13, -13, -14, -14, -15, -15, -15, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16}; //oo
		double[] data = {13, 13, 12, 12, 11, 10, 9, 8, 7, 7, 7, 7, 6, 5, 4, 3, 1, 0, -2, -4, -6, -7, -7, -7, -7, -6, -6, -5, -5, -5, -6, -7, -8, -9, -10, -11, -11, -11, -10, -8, -7, -6, -4, -3, -3, -3, -3, -3, -4, -4, -4, -4, -3, -2, -2, 0, 0, 1, 1, 1, 0, 0, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 6, 6, 5, 5, 4, 4, 5, 5, 7, 8, 9, 11, 12, 13, 13, 13, 13, 12, 11, 10, 9, 9, 9, 9, 9, 9, 9, 8, 7, 6, 5, 3, 2, 0, -1, -2, -3, -3, -3, -3, -4, -5, -5, -7, -8, -9, -11, -12, -13, -13, -13, -13, -12, -11, -10, -9, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -6, -5, -4, -3, -2, -2, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 7, 8, 8, 9, 9, 10, 9, 9, 8, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -3, -3, -3, -4, -4, -5, -6, -7, -8, -9, -10, -11, -11, -11, -11, -11, -10, -10, -10, -10, -10, -11, -12, -12, -13, -13, -13, -13, -13, -12, -11, -10, -10, -9, -9, -9, -9, -9, -9, -8, -8, -7, -7, -6, -5, -5, -4, -4, -4, -4, -4, -4, -3, -3, -1, 0, 2, 4, 5, 7, 8, 9, 9, 9, 9, 8, 8, 8, 8, 8, 9, 10, 11, 11, 12, 12}; // oh
		double[] zeros = new double[data.length];
		double[] outreal = new double[data.length];
		double[] outimag = new double[data.length];
		computeDft(data,zeros,outreal,outimag);
		BufferedWriter out = new BufferedWriter(new FileWriter(new File("dft.txt")));
		for(int k=0; k<data.length; k++) {
			out.write(k+"\t"+outreal[k]+"\t"+outimag[k]+"\t"+Math.sqrt(outreal[k]*outreal[k]+outimag[k]*outimag[k])+"\n");
		}
		out.close();
	}
	public static void computeDft(double[] inreal, double[] inimag, double[] outreal, double[] outimag) {
		int n = inreal.length;
		for (int k = 0; k < n; k++) {  // For each output element
			double sumreal = 0;
			double sumimag = 0;
			for (int t = 0; t < n; t++) {  // For each input element
				double angle = 2 * Math.PI * t * k / n;
				sumreal +=  inreal[t] * Math.cos(angle) + inimag[t] * Math.sin(angle);
				sumimag += -inreal[t] * Math.sin(angle) + inimag[t] * Math.cos(angle);
			}
			outreal[k] = sumreal;
			outimag[k] = sumimag;
		}
	}
	
}